package com.programmerare.crsTransformations.coordinate

import com.programmerare.crsTransformations.crsIdentifier.CrsIdentifier

/**
 * TODO general (class level) documentation about the different factory methods
 * Roughly something like this:
 * three parameters: x , y and coordinate system
 * coodinate system is EPSG, and can be of three types, integer, string (with ESPG: prefix) or an object which is internally created by the others ..
 * (if multiple coordinates are to be created, use the object version, otherwise more convenient to use integer or string constants)
 * The factory methods have different names depending on which order you want to specify
 * the two coordinates, and also depending on how long names you want and if you prefer x/y or lon/lat.
 * These three methods are alternatives, doing exatly the same with the same parameters:
 *  createFromXLongitudeYLatitude , xy , lonLat
 * These three methods are alternatives, doing exatly the same with the same parameters:
 *  createFromYLatitudeXLongitude , yx , latLon
 */
class Coordinate internal constructor(
    val xLongitude: Double,
    val yLatitude: Double,
    val crsIdentifier: CrsIdentifier
) {
    // The constructor is private to force client code to use the below factory methods
    // which are named to indicate the order of the longitude and latitude parameters.

    //------------------------------------------------------------------
    // The implementation of the following three methods were generated by IntelliJ IDEA
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Coordinate

        if (xLongitude != other.xLongitude) return false
        if (yLatitude != other.yLatitude) return false
        if (crsIdentifier != other.crsIdentifier) return false

        return true
    }

    override fun hashCode(): Int {
        var result = xLongitude.hashCode()
        result = 31 * result + yLatitude.hashCode()
        result = 31 * result + crsIdentifier.hashCode()
        return result
    }

    override fun toString(): String {
        return "Coordinate(xLongitude=$xLongitude, yLatitude=$yLatitude, crsIdentifier=$crsIdentifier)"
    }
    //------------------------------------------------------------------
}