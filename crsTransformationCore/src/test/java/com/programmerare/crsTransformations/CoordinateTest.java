package com.programmerare.crsTransformations;

import com.programmerare.crsTransformations.crsConstants.ConstantEpsgNumber;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

class CoordinateTest {
    private final double deltaTolerance = 0.00001;
    private final double xLongitude = 12.34;
    private final double yLatitude = 56.67;
    private final int epsgNumber = ConstantEpsgNumber.SWEREF99TM;

    @Test
    void trivialCreateCoordinateTest() {
        Coordinate coordinate = Coordinate.createFromXLongYLat(xLongitude, yLatitude, epsgNumber);
        assertEquals(xLongitude, coordinate.getXLongitude(), deltaTolerance);
        assertEquals(yLatitude, coordinate.getYLatitude(), deltaTolerance);
        assertEquals(epsgNumber, coordinate.getCrsIdentifier().getEpsgNumber());
    }

    @Test
    void createCoordinatesWithEpsgNumberButWithDifferentOrderOfLatLongParameters() {
        Coordinate coordinate1 = Coordinate.createFromXLongYLat(xLongitude, yLatitude, epsgNumber);
        Coordinate coordinate2 = Coordinate.createFromYLatXLong(yLatitude, xLongitude, epsgNumber);
        assertEqualCoordinates(coordinate1, coordinate2);
    }

    @Test
    void createCoordinatesWithCrsCodeButWithDifferentOrderOfLatLongParameters() {
        String crsCode = "EPSG:3006";
        Coordinate coordinate1 = Coordinate.createFromXLongYLat(xLongitude, yLatitude, crsCode);
        Coordinate coordinate2 = Coordinate.createFromYLatXLong(yLatitude, xLongitude, crsCode);
        assertEqualCoordinates(coordinate1, coordinate2);
    }

    @Test
    void createCoordinatesWithCrsIdentifierButWithDifferentOrderOfLatLongParameters() {
        CrsIdentifier crsIdentifier = CrsIdentifier.createFromEpsgNumber(3006);
        Coordinate coordinate1 = Coordinate.createFromXLongYLat(xLongitude, yLatitude, crsIdentifier);
        Coordinate coordinate2 = Coordinate.createFromYLatXLong(yLatitude, xLongitude, crsIdentifier);
        assertEqualCoordinates(coordinate1, coordinate2);
    }

    private void assertEqualCoordinates(Coordinate coordinate1, Coordinate coordinate2) {
        assertEquals(coordinate1.getXLongitude(), coordinate2.getXLongitude(), deltaTolerance);
        assertEquals(coordinate1.getYLatitude(), coordinate2.getYLatitude(), deltaTolerance);
        assertEquals(coordinate1.getCrsIdentifier(), coordinate2.getCrsIdentifier()); // data class
        assertEquals(coordinate1.getCrsIdentifier().getEpsgNumber(), coordinate2.getCrsIdentifier().getEpsgNumber());

        // TODO: find out how the autogenerated implementations of equals and hashCode
        // are implemented in a Kotlin data class, e.g. Coordinate,
        // when properties are typed as double.
        // Maybe using Double.compare and Double.doubleToLongBits and following recommendations
        // of "Effective Java" book (Joshua Bloch)
        assertEquals(coordinate1.hashCode(), coordinate2.hashCode());
        assertEquals(coordinate1, coordinate2);
        // Note that the above assertion is not reliable since double fields are used.
        // Example below from an assertion failure in class CrsTransformationFacadeAverageTest:
        // assertEquals(coordinateWithAverageLatitudeAndLongitude, coordinateReturnedByCompositeFacade);
        // Expected :Coordinate(xLongitude=674032.3572074446, yLatitude=6580821.991903967, crsIdentifier=CrsIdentifier(crsCode=EPSG:3006, isEpsgCode=true, epsgNumber=3006))
        // Actual   :Coordinate(xLongitude=674032.3572074447, yLatitude=6580821.991903967, crsIdentifier=CrsIdentifier(crsCode=EPSG:3006, isEpsgCode=true, epsgNumber=3006))
    }
}