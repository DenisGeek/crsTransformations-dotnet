package com.programmerare.crsTransformations;

import com.programmerare.crsConstants.constantsByNumberNameArea.v9_5_4.EpsgNumber;
import com.programmerare.crsConstants.constantsByNumberNameArea.v9_5_4.EpsgCode;
import com.programmerare.crsTransformations.coordinate.CrsCoordinate;
import com.programmerare.crsTransformations.coordinate.CrsCoordinateFactory;
import com.programmerare.crsTransformations.crsIdentifier.CrsIdentifier;
import com.programmerare.crsTransformations.crsIdentifier.CrsIdentifierFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

class CoordinateTest {
    private final double deltaTolerance = 0.00001;
    private final double xLongitude = 12.34;
    private final double yLatitude = 56.67;
    private final int epsgNumber = EpsgNumber._3006__SWEREF99_TM__SWEDEN;
    private final String epsgCode = EpsgCode._3006__SWEREF99_TM__SWEDEN;

    @Test
    void trivialCreateCoordinateTest() {
        CrsCoordinate coordinate = CrsCoordinateFactory.createFromXEastingLongitudeAndYNorthingLatitude(xLongitude, yLatitude, epsgNumber);
        assertEquals(xLongitude, coordinate.getXEastingLongitude(), deltaTolerance);
        assertEquals(yLatitude, coordinate.getYNorthingLatitude(), deltaTolerance);
        assertEquals(epsgNumber, coordinate.getCrsIdentifier().getEpsgNumber());
    }

    @Test
    void createCoordinatesWithEpsgNumberButWithDifferentOrderOfLatLongParameters() {
        CrsCoordinate coordinate1 = CrsCoordinateFactory.createFromXEastingLongitudeAndYNorthingLatitude(xLongitude, yLatitude, epsgNumber);
        CrsCoordinate coordinate2 = CrsCoordinateFactory.createFromYNorthingLatitudeAndXEastingLongitude(yLatitude, xLongitude, epsgNumber);
        assertEqualCoordinates(coordinate1, coordinate2);

        //CoordinateFactory.kallemetoden()
    }

    @Test
    void createCoordinatesWithCrsCodeButWithDifferentOrderOfLatLongParameters() {
        String crsCode = "EPSG:3006";
        CrsCoordinate coordinate1 = CrsCoordinateFactory.createFromXEastingLongitudeAndYNorthingLatitude(xLongitude, yLatitude, crsCode);
        CrsCoordinate coordinate2 = CrsCoordinateFactory.createFromYNorthingLatitudeAndXEastingLongitude(yLatitude, xLongitude, crsCode);
        assertEqualCoordinates(coordinate1, coordinate2);
    }

    @Test
    void createCoordinatesWithCrsIdentifierButWithDifferentOrderOfLatLongParameters() {
        CrsIdentifier crsIdentifier = CrsIdentifierFactory.createFromEpsgNumber(3006);
        CrsCoordinate coordinate1 = CrsCoordinateFactory.createFromXEastingLongitudeAndYNorthingLatitude(xLongitude, yLatitude, crsIdentifier);
        CrsCoordinate coordinate2 = CrsCoordinateFactory.createFromYNorthingLatitudeAndXEastingLongitude(yLatitude, xLongitude, crsIdentifier);
        assertEqualCoordinates(coordinate1, coordinate2);
    }

    @Test
    void createCoordinatesWithWgs84AsDefaultWhenNotSpecifyingCRS() {
        double wgs84Lat = 59.330231;
        double wgs84Lon = 18.059196;

        CrsCoordinate wgs84_1 = CrsCoordinateFactory.createFromLongitudeLatitude(wgs84Lon, wgs84Lat);
        assertEquals(EpsgNumber._4326__WGS_84__WORLD, wgs84_1.getCrsIdentifier().getEpsgNumber());
        assertEquals(  EpsgCode._4326__WGS_84__WORLD, wgs84_1.getCrsIdentifier().getCrsCode());

        CrsCoordinate wgs84_2 = CrsCoordinateFactory.createFromLatitudeLongitude(wgs84Lat, wgs84Lon);
        assertEquals(EpsgNumber._4326__WGS_84__WORLD, wgs84_2.getCrsIdentifier().getEpsgNumber());
        assertEquals(  EpsgCode._4326__WGS_84__WORLD, wgs84_2.getCrsIdentifier().getCrsCode());

        CrsCoordinate wgs84_3 = CrsCoordinateFactory.createFromYNorthingLatitudeAndXEastingLongitude(wgs84Lat, wgs84Lon, EpsgNumber._4326__WGS_84__WORLD);
        assertEqualCoordinates(wgs84_3, wgs84_1);
        assertEqualCoordinates(wgs84_3, wgs84_2);
    }

    private void assertEqualCoordinates(CrsCoordinate coordinate1, CrsCoordinate coordinate2) {
        assertEquals(coordinate1.getXEastingLongitude(), coordinate2.getXEastingLongitude(), deltaTolerance);
        assertEquals(coordinate1.getYNorthingLatitude(), coordinate2.getYNorthingLatitude(), deltaTolerance);
        assertEquals(coordinate1.getCrsIdentifier(), coordinate2.getCrsIdentifier()); // data class
        assertEquals(coordinate1.getCrsIdentifier().getEpsgNumber(), coordinate2.getCrsIdentifier().getEpsgNumber());

        // TODO: find out how the autogenerated implementations of equals and hashCode
        // are implemented in a Kotlin data class, e.g. Coordinate,
        // when properties are typed as double.
        // Maybe using Double.compare and Double.doubleToLongBits and following recommendations
        // of "Effective Java" book (Joshua Bloch)
        assertEquals(coordinate1.hashCode(), coordinate2.hashCode());
        assertEquals(coordinate1, coordinate2);
        // Note that the above assertion is not reliable since double fields are used.
        // Example below from an assertion failure in class CrsTransformationAdapterAverageTest:
        // assertEquals(coordinateWithAverageLatitudeAndLongitude, coordinateReturnedByCompositeAdapter);
        // Expected :Coordinate(xEastingLongitude=674032.3572074446, yNorthingLatitude=6580821.991903967, crsIdentifier=CrsIdentifier(crsCode=EPSG:3006, isEpsgCode=true, epsgNumber=3006))
        // Actual   :Coordinate(xEastingLongitude=674032.3572074447, yNorthingLatitude=6580821.991903967, crsIdentifier=CrsIdentifier(crsCode=EPSG:3006, isEpsgCode=true, epsgNumber=3006))
    }


    // The Coordinate class (implemented with Kotlin) does not explicitly implement
    // the methods equals and hashCode but the class is a "data class" (with an implicit/automatic implementation )
    @Test
    void assertEqualsAndHashCodeWhenSixDecimalsAreUsed() {
        CrsCoordinate c1 = CrsCoordinateFactory.createFromLatitudeLongitude(59.123456, 18.123456000);
        CrsCoordinate c2 = CrsCoordinateFactory.createFromLatitudeLongitude(59.123456000, 18.123456);
        assertEquals(
            c1, c2
        );
        assertEquals(
            c1.hashCode(), c2.hashCode()
        );
    }

    @Test
    void assertEqualsAndHashCodeWhenNineDecimalsAreUsed() {
        CrsCoordinate c1 = CrsCoordinateFactory.createFromLatitudeLongitude(59.123456789, 18.123456789000);
        CrsCoordinate c2 = CrsCoordinateFactory.createFromLatitudeLongitude(59.123456789000, 18.123456789);
        assertEquals(
            c1, c2
        );
        assertEquals(
            c1.hashCode(), c2.hashCode()
        );
    }

    @Test
    void assertNotEqualsWhenVerySmallDifference() {
        // very small latitude difference:
        assertNotEquals(
            CrsCoordinateFactory.createFromLatitudeLongitude(59.123456789000, 18.123456789),
            CrsCoordinateFactory.createFromLatitudeLongitude(59.123456789001, 18.123456789)
        );

        // very small longitude difference:
        assertNotEquals(
            CrsCoordinateFactory.createFromLatitudeLongitude(59.123456789, 18.123456789000),
            CrsCoordinateFactory.createFromLatitudeLongitude(59.123456789, 18.123456789001)
        );
    }


    @Test
    void assertEqualsWhenUsingEquivalentXYmethods() {
        CrsCoordinate c1, c2, c3, c3_, c4, c5, c6, c6_, c7, c8, c9, c9_;

        // the last parameter is an integer for these three:
        c1 = CrsCoordinateFactory.createFromXEastingLongitudeAndYNorthingLatitude(xLongitude, yLatitude, epsgNumber);
        c2 = CrsCoordinateFactory.lonLat(xLongitude, yLatitude, epsgNumber);
        c3 = CrsCoordinateFactory.xy(xLongitude, yLatitude, epsgNumber);
        c3_ = CrsCoordinateFactory.eastingNorthing(xLongitude, yLatitude, epsgNumber);
        // TODO better names of the variables

        // the last parameter is s string for these three:
        c4 = CrsCoordinateFactory.createFromXEastingLongitudeAndYNorthingLatitude(xLongitude, yLatitude, epsgCode);
        c5 = CrsCoordinateFactory.lonLat(xLongitude, yLatitude, epsgCode);
        c6 = CrsCoordinateFactory.xy(xLongitude, yLatitude, epsgCode);
        c6_ = CrsCoordinateFactory.eastingNorthing(xLongitude, yLatitude, epsgCode);

        CrsIdentifier crsIdentifier = CrsIdentifierFactory.createFromEpsgNumber(epsgNumber);
        c7 = CrsCoordinateFactory.createFromXEastingLongitudeAndYNorthingLatitude(xLongitude, yLatitude, crsIdentifier);
        c8 = CrsCoordinateFactory.lonLat(xLongitude, yLatitude, crsIdentifier);
        c9 = CrsCoordinateFactory.xy(xLongitude, yLatitude, crsIdentifier);
        c9_ = CrsCoordinateFactory.eastingNorthing(xLongitude, yLatitude, crsIdentifier);

        assertEquals(c1, c2);
        assertEquals(c1, c3);
        assertEquals(c1, c4);
        assertEquals(c1, c5);
        assertEquals(c1, c6);
        assertEquals(c1, c7);
        assertEquals(c1, c8);
        assertEquals(c1, c9);
        assertEquals(c1, c3_);
        assertEquals(c1, c6_);
        assertEquals(c1, c9_);
    }

    @Test
    void assertEqualsWhenUsingEquivalentYXmethods() {
        CrsCoordinate c1, c2, c3, c3_, c4, c5, c6, c6_, c7, c8, c9, c9_;

        // the last parameter is an integer for these three:
        c1 = CrsCoordinateFactory.createFromYNorthingLatitudeAndXEastingLongitude(yLatitude, xLongitude, epsgNumber);
        c2 = CrsCoordinateFactory.latLon(yLatitude, xLongitude, epsgNumber);
        c3 = CrsCoordinateFactory.yx(yLatitude, xLongitude, epsgNumber);
        c3_ = CrsCoordinateFactory.northingEasting(yLatitude, xLongitude, epsgNumber);
        // TODO better names of the variables

        // the last parameter is s string for these three:
        c4 = CrsCoordinateFactory.createFromYNorthingLatitudeAndXEastingLongitude(yLatitude, xLongitude, epsgCode);
        c5 = CrsCoordinateFactory.latLon(yLatitude, xLongitude, epsgCode);
        c6 = CrsCoordinateFactory.yx(yLatitude, xLongitude, epsgCode);
        c6_ = CrsCoordinateFactory.northingEasting(yLatitude, xLongitude, epsgCode);

        CrsIdentifier crsIdentifier = CrsIdentifierFactory.createFromEpsgNumber(epsgNumber);
        c7 = CrsCoordinateFactory.createFromYNorthingLatitudeAndXEastingLongitude(yLatitude, xLongitude, crsIdentifier);
        c8 = CrsCoordinateFactory.latLon(yLatitude, xLongitude, crsIdentifier);
        c9 = CrsCoordinateFactory.yx(yLatitude, xLongitude, crsIdentifier);
        c9_ = CrsCoordinateFactory.northingEasting(yLatitude, xLongitude, crsIdentifier);

        assertEquals(c1, c2);
        assertEquals(c1, c3);
        assertEquals(c1, c4);
        assertEquals(c1, c5);
        assertEquals(c1, c6);
        assertEquals(c1, c7);
        assertEquals(c1, c8);
        assertEquals(c1, c9);
        assertEquals(c1, c3_);
        assertEquals(c1, c6_);
        assertEquals(c1, c9_);
    }

    @Test
    void assertXequalsEastingEqualsLongitude() {
        CrsCoordinate c = CrsCoordinateFactory.createFromYNorthingLatitudeAndXEastingLongitude(yLatitude, xLongitude, epsgCode);
        assertEquals(c.getXEastingLongitude(), c.getX());
        assertEquals(c.getXEastingLongitude(), c.getEasting());
        assertEquals(c.getXEastingLongitude(), c.getLongitude());
    }

    @Test
    void assertYequalsNorthingEqualsLatitude() {
        CrsCoordinate c = CrsCoordinateFactory.createFromYNorthingLatitudeAndXEastingLongitude(yLatitude, xLongitude, epsgCode);
        assertEquals(c.getYNorthingLatitude(), c.getY());
        assertEquals(c.getYNorthingLatitude(), c.getNorting());
        assertEquals(c.getYNorthingLatitude(), c.getLatitude());
    }
}